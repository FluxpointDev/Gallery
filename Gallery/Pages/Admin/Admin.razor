@page "/admin"
@using Gallery.Database
@using ImageMagick
@using Gallery.Data
@using System.IO
@using MatBlazor
@attribute [Authorize(Roles = "owner, admin")]
@inject IMatToaster Toaster

<title>Admin</title>
<h3>Welcome to the admin page!</h3>

<h5>Albums: @DB.Albums.Count</h5>
<h5>Images: @DB.Images.Count</h5>
<h5>Tags: @DB.Tags.Count</h5>
<AuthorizeView Roles="owner">
    <button @onclick="TestClick">Regen thumbnails</button>
    <MatTextField @bind-Value="@Image" Label="Standard"></MatTextField>
    <button @onclick="@DeleteImage">Delete image</button>
    <br />
    <MatTextField @bind-Value="@NewTag" Label="Standard"></MatTextField>
    <button @onclick="@AddTag">Add Tag</button>
    <br />
    <button @onclick="@MigrateTags">Migrate Tags</button>
    <br />
    <br />
    <br />
    <h3>Database</h3>
    <br />
    <MatButton OnClick="@(() => ReloadAction("tags"))" Unelevated="true" Icon="label">Reload Tags</MatButton>
    <MatButton OnClick="@(() => ReloadAction("images"))" Unelevated="true" Icon="image">Reload Images</MatButton>
    <MatButton OnClick="@(() => ReloadAction("albums"))" Unelevated="true" Icon="view_comfy">Reload Albums</MatButton>
    <MatButton OnClick="@(() => ReloadAction("metadata"))" Unelevated="true" Icon="not_listed_location">Reload Metadata</MatButton>
    <MatButton OnClick="@(() => ReloadAction("users"))" Unelevated="true" Icon="person_pin">Reload Users</MatButton>
    <MatButton OnClick="@(() => ReloadAction("api"))" Unelevated="true" Icon="vpn_key">Reload API Keys</MatButton>
</AuthorizeView>



@code {
    public string Image = "";
    public string NewTag = "";

    public void MigrateTags()
    {
         ShowToast("Running migration");
        foreach(GImage i in DB.Images.Values)
        {
            switch (i.album)
            {
                case 7:
                    {
                        try
                        {
                            i.tags.Add(10);
                        }
                        catch {}
                        i.Update();
                    }
                break;
                case 1:
                    {
                        try
                        {
                            i.tags.Add(12);
                        }
                        catch {}
                        i.Update();
                    }
                break;
                case 8:
                    {
                        try
                        {
                            i.tags.Add(9);
                        }
                        catch {}
                        try
                        {
                            i.tags.Add(1);
                        }
                        catch {}
                        i.Update();
                    }
                break;
            }
        }
        ShowToast("Migrated tags data");
    }

    public void AddTag()
    {
        int id = DB.Tags.Values.OrderByDescending(x => x.id).First().id + 1;
         GTag newtag = new GTag()
         {
             id = id,
             name = NewTag
         };
         DB.Tags.Add(id, newtag);
        newtag.Add();
    }

    void DeleteImage()
    {
        if (DB.Images.TryGetValue(Image, out GImage Img))
        {
            DB.R.Db(Program.DatabaseName).Table("Images").Get(Img.id).Delete().RunNoReply(DB.Con);

            if (File.Exists(Img.GetFile(imageType.Full)))
                File.Delete(Img.GetFile(imageType.Full));

            if (File.Exists(Img.GetFile(imageType.Medium)))
                File.Delete(Img.GetFile(imageType.Medium));

            if (File.Exists(Img.GetFile(imageType.Thumbnail)))
                File.Delete(Img.GetFile(imageType.Thumbnail));

            //DB.HashSet.Remove(Img.file.hash);
            DB.Images.Remove(Image);
        }
    }

    void TestClick()
    {
        foreach(GImage i in DB.Images.Values)
        {
            using (FileStream fi = File.OpenRead(i.GetFile(imageType.Full)))
            {
                using (MagickImage image = new MagickImage(fi, new MagickReadSettings { ColorType = ColorType.Optimize }))
                {
                    image.Resize(792, 594);
                    image.Write(i.GetFile(imageType.Medium));
                    image.Resize(320, 320);
                    image.Write(i.GetFile(imageType.Thumbnail));
                }
            }
        }
        Console.WriteLine("DONE");
    }

    public void ReloadAction(string type)
    {
        switch (type)
        {
            case "tags":
                DB.ReloadTags();
                break;
                case "albums":
                DB.ReloadAlbums();
                break;
                case "images":
                DB.ReloadImages();
                break;
                case "metadata":
                DB.ReloadMetaData();
                break;
                case "users":
                DB.ReloadUsers();
                break;
                case "api":
                DB.ReloadAPIKeys();
                break;
        }
        ShowToast("Reloaded " + type);
    }

    public void ShowToast(string desc)
    {
        Toaster.Add(desc, MatToastType.Success, "", "", config =>
        {
            config.ShowCloseButton = false;
            config.ShowProgressBar = true;
            config.MaximumOpacity = Convert.ToInt32(100);

            config.ShowTransitionDuration = Convert.ToInt32(500);
            config.VisibleStateDuration = Convert.ToInt32(8000);
            config.HideTransitionDuration = Convert.ToInt32(500);

        });
    }
        
}
