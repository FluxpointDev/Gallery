@page "/admin"
@page "/upload"
@using Gallery.Database
@using ImageMagick
@using Gallery.Data
@using System.IO
@using Radzen
@attribute [Authorize]

@if (DB.GalleryUsers[Session.State.User.GetId()].upload.enabled)
{
    <RadzenTabs SelectedIndex="tabIndex">
        <Tabs>
            <RadzenTabsItem Text="Main">
                <div class="section">
                    <h3><span class="iconify" data-icon="mdi:database" data-inline="false" style="color: #fff;"></span> Database</h3>
                    <div class="section-list">
                        <div class="mat-layout-grid">
                            <div class="mat-layout-grid-inner">
                                <div class="mat-layout-grid-cell">
                                    <h5>Images: @DB.Images.Count</h5>
                                </div>
                                <div class="mat-layout-grid-cell">
                                    <h5>Albums: @DB.Albums.Count</h5>
                                </div>
                                <div class="mat-layout-grid-cell">
                                    <h5>Tags: @DB.Tags.Count</h5>
                                </div>
                            </div>
                        </div>
                    </div>
                    <AuthorizeView Roles="owner">
                        <br />
                        <div class="section-list">
                            <RadzenButton Click=@(() => ReloadAction("tags")) Text="Reload Tags" ButtonStyle="ButtonStyle.Light" />
                            <RadzenButton Click=@(() => ReloadAction("images")) Text="Reload Images" ButtonStyle="ButtonStyle.Light" />
                            <RadzenButton Click=@(() => ReloadAction("albums")) Text="Reload Albums" ButtonStyle="ButtonStyle.Light" />
                            <RadzenButton Click=@(() => ReloadAction("metadata")) Text="Reload Metadata" ButtonStyle="ButtonStyle.Light" />
                            <RadzenButton Click=@(() => ReloadAction("users")) Text="Reload Users" ButtonStyle="ButtonStyle.Light" />
                            <RadzenButton Click=@(() => ReloadAction("api")) Text="Reload API" ButtonStyle="ButtonStyle.Light" />
                                <RadzenButton Click=@(() => ReloadAction("endpoint")) Text="Reload Endpoints" ButtonStyle="ButtonStyle.Light" />
                            <RadzenButton Click=@(() => ReloadAction("waifu")) Text="Reload Waifu Nsfw" ButtonStyle="ButtonStyle.Light" />
                        </div>
                    </AuthorizeView>
                </div>
                <div class="section">
                    <h3><span class="iconify" data-icon="mdi:image-multiple" data-inline="false" style="color: #fff;"></span> Images</h3>
                    <div class="section-list">
                        <div class="section-item section-color-add" @onclick="@(() => GoTo(1))">
                            <h5>Upload</h5>
                            <span class="iconify" data-icon="mdi:cloud-upload" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-edit" @onclick="@(() => GoTo(2))">
                            <h5>Manage</h5>
                            <span class="iconify" data-icon="mdi:image-edit" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-delete" @onclick="@(() => GoTo(3))">
                            <h5>Delete</h5>
                            <span class="iconify" data-icon="mdi:image-remove" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-misc" @onclick="@TestClick">
                            <h5>Regen Thumbnails</h5>
                        </div>
                        <div class="section-item section-color-misc" @onclick="@CheckImages">
                            <h5>Check Images</h5>
                        </div>
                    </div>
                </div>
                <div class="section">
                    <h3><span class="iconify" data-icon="mdi:folder-multiple-image" data-inline="false" style="color: #fff;"></span> Albums</h3>
                    <div class="section-list">
                        <div class="section-item section-color-add" @onclick="@(() => GoTo(4))">
                            <h5>Create</h5>
                            <span class="iconify" data-icon="mdi:folder-plus" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-edit" @onclick="@(() => GoTo(5))">
                            <h5>Manage</h5>
                            <span class="iconify" data-icon="mdi:folder-edit" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-delete" @onclick="@(() => GoTo(6))">
                            <h5>Delete</h5>
                            <span class="iconify" data-icon="mdi:folder-remove" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-misc" @onclick="@MigrateTags">
                            <h5>Migrate Tags</h5>
                        </div>
                    </div>
                </div>
                <div class="section">
                    <h3><span class="iconify" data-icon="mdi:label-multiple" data-inline="false" style="color: #fff;"></span> Tags</h3>
                    <div class="section-list">
                        <div class="section-item section-color-add" @onclick="@(() => GoTo(7))">
                            <h5>Create</h5>
                            <span class="iconify" data-icon="mdi:tag-plus" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-edit" @onclick="@(() => GoTo(8))">
                            <h5>Manage</h5>
                            <span class="iconify" data-icon="mdi:tag-text" data-inline="false" style="color: #fff;"></span>
                        </div>
                        <div class="section-item section-color-delete" @onclick="@(() => GoTo(9))">
                            <h5>Delete</h5>
                            <span class="iconify" data-icon="mdi:tag-remove" data-inline="false" style="color: #fff;"></span>
                        </div>
                    </div>
                </div>
                <div class="section">
                    <h3><span class="iconify" data-icon="mdi:label-multiple" data-inline="false" style="color: #fff;"></span> API</h3>
                    <div class="section-list">
                        <div class="section-item section-color-add" @onclick="@(() => GoTo(10))">
                            <h5>Manage Endpoints</h5>
                            <span class="iconify" data-icon="mdi:bolt" data-inline="false" style="color: #fff;"></span>
                        </div>
                    </div>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Upload Image">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Image Upload</h2>
                </div>
                <UploadSection></UploadSection>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Manage Images">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Manage Images</h2>
                </div>
                <AuthorizeView Roles="owner">
                    <ImagesManageSection></ImagesManageSection>
                </AuthorizeView>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Delete Images">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Image Delete</h2>
                </div>
                <RadzenTextBox @bind-Value="@Image" Name="ID" />
    <MatButton OnClick="@DeleteImage">Delete image</MatButton>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Create Album">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Album Create</h2>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Manage Albums">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Album Manage</h2>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Delete Albums">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Album Delete</h2>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Create Tag">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Create Tag</h2>
                </div>
                <AuthorizeView Roles="owner">
                    <RadzenTextBox @bind-Value="@NewTag" Name="ID" />
                    <button @onclick="@AddTag">Add Tag</button>
                </AuthorizeView>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Manage Tags">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Tags Manage</h2>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Delete Tags">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>Delete Tag</h2>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="API Manager">
                <div class="section-header">
                    <div class="section-back" @onclick="@(() => GoTo(0))">
                        <span class="iconify" data-icon="mdi:keyboard-backspace" data-inline="false" style="color: #fff;"></span>
                    </div>
                    <h2>API Manager</h2>
                    <AuthorizeView Roles="owner">
                        <br />
                        <h4 class="mb-4">Path</h4>
                        <RadzenTextBox @bind-Value="@EndpointPath" Name="Path" />
                        <h4 class="mb-4">Is Gif</h4>
                        <RadzenCheckBox @bind-Value=@EndpointGif  Name="Is Gif" TValue="bool" />
                        <h4 class="mb-4">Is Nsfw</h4>
                        <RadzenCheckBox @bind-Value=@EndpointNsfw  Name="Is Nsfw" TValue="bool" />
                        <h4 class="mb-4">Albums</h4>
                        <RadzenTextBox @bind-Value="@EndpointAlbums" Name="Albums" />
                        <h4 class="mb-4">Tags</h4>
                        <RadzenTextBox @bind-Value="@EndpointTags" Name="Tags" />
                        <br />
                        <MatButton OnClick="@AddEndpoint">Add</MatButton>
                        <br />
                        
                        @foreach(var i in DB.Endpoints.Values)
                        {
                            <div class="endpoint-item">
                                <span class="iconify" data-icon="mdi:close-circle" @onclick="@(() => DeleteEndpoint(i.id))"></span>
                                @if (i.isNsfw)
                                {
                                    <h3 class="endpoint-item-nsfw">@i.GetPath()</h3>
                                }
                                else
                                {
                                    <h3 class="endpoint-item-sfw">@i.GetPath()</h3>
                                }
                                <div class="endpoint-albums">
                                    <p>Albums: </p>
                                    @foreach (var a in i.albums)
                                    {
                                        <a target="_blank" href="@("https://gallery.fluxpoint.dev/album/" + a.Key)"><div class="endpoint-album"><h4>@a.Key</h4></div></a>
                                    }
                                </div>
                                <div class="endpoint-albums">
                                    <p>Tags: </p>
                                    @foreach (var a in i.tags)
                                    {
                                        <div class="endpoint-album"><h4>@a.Key</h4></div>
                                    }
                                </div>
                            </div>
                        }
                        
                    </AuthorizeView>
                </div>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

<style>
    .mdc-tab-bar {
        display: none;
    }

    .section {
        background-color: #303336;
        padding: 6px;
        padding-top: 10px;
        padding-bottom: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .section-list {
        padding-left: 16px;
    }

    .section h3 {
        padding-left: 8px;
        margin-bottom: 10px;
    }

    .section-item {
        cursor: pointer;
        width: 110px;
        height: 110px;
        border-radius: 16px;
        background-color: #33383c;
        display: inline-block;
        text-align: center;
        margin-right: 5px;
    }

        .section-item h5 {
            margin-top: 26px;
        }

    .section-color-misc {
        padding-top: 12px !important;
    }

        .section-color-misc h5 {
            margin-top: 26px;
            padding-left: 8px;
            padding-right: 8px;
        }

    .section-item .iconify {
        width: 30px;
        height: 30px;
        vertical-align: middle;
    }

    .section .mdc-button {
        background-color: #1b6ec2;
    }

        .section .mdc-button:hover {
            background-color: #1861ac;
        }

    .section-color-add {
        background-color: #239f55;
    }

        .section-color-add:hover {
            background-color: #1e8a4a;
        }

    .section-color-edit {
        background-color: #d5a838;
    }

        .section-color-edit:hover {
            background-color: #c99c2a;
        }

    .section-color-delete {
        background-color: #c03636;
    }

        .section-color-delete:hover {
            background-color: #ac3030;
        }

    .section-color-misc {
        background-color: #3f6791;
    }

        .section-color-misc:hover {
            background-color: #375a7f;
        }

    .section-back {
        cursor: pointer;
        width: 50px;
        height: 50px;
        border-radius: 16px;
        background-color: #1b6ec2;
        display: inline-block;
        text-align: center;
        margin-right: 15px;
        margin-bottom: 10px;
    }

        .section-back:hover {
            background-color: #1861ac;
        }

        .section-back .iconify {
            width: 30px;
            height: 30px;
            vertical-align: middle;
            margin-top: 10px;
        }

    .section-header {
        margin-bottom: 15px;
    }

        .section-header h2 {
            vertical-align: middle;
            display: inline;
            padding-top: 10px;
        }
</style>
<style>
    .rz-tabview-panel {
    background-color: #2c2c2c !important;
}
.mb-4 {
    margin-top: 30px;
    margin-bottom: 6px !important;
}
.rz-tabview-panel .mdc-button {
    margin-top: 20px;
    background-color: #1b6ec2;
    color: white !important;
}

.endpoint-item {
    background-color: #191919 !important;
    border-radius: 6px;
    margin-top: 6px;
    margin-bottom: 6px;
}
.endpoint-item .iconify {
    width: 26px;
    height: 26px;
    margin-bottom: -2px;
    color: #f74d5a !important;
    margin-left: 10px;
    cursor: pointer;
}
.endpoint-item h3 {
    display: inline-block;
    font-size: 18pt;
    margin-top: 12px;
    margin-bottom: 12px;
    margin-left: 10px;
}
.endpoint-item-nsfw {
    color: #da66ad !important;
}
.endpoint-item-sfw {
    color: #62adca !important;
}

.endpoint-albums {
    margin-left: 42px;
    margin-right: 10px;
    padding-bottom: 6px;
}

.endpoint-album h4 {
    display: inline-block;
    margin-right: 6px;
    margin-bottom: 6px;
    padding: 12px;
    padding-top: 6px;
    padding-bottom: 6px;
    border-radius: 90px;
    background-color: #2c2c2c !important;
}
.rz-tabview-nav {
    display: none;
}
</style>





@code {
    public string Image = "";
    public string NewTag = "";

    public int tabIndex = 0;

    public void GoTo(int page)
    {
        tabIndex = page;
    }

    public string EndpointPath;
    public bool EndpointNsfw;
    public bool EndpointGif;
    public string EndpointAlbums;
    public string EndpointTags;

    public void AddEndpoint()
    {
        if (string.IsNullOrEmpty(EndpointPath) || (string.IsNullOrEmpty(EndpointAlbums) && string.IsNullOrEmpty(EndpointTags)))
            return;
        Endpoint EN = new Endpoint
            {
                id = DB.Endpoints.Keys.OrderByDescending(x => x).First() + 1,
                isNsfw = EndpointNsfw,
                path = EndpointPath,
                isGifs = EndpointGif
            };

        if (!string.IsNullOrEmpty(EndpointAlbums))
            EN.albums = EndpointAlbums.Split(',', StringSplitOptions.TrimEntries).ToDictionary(x => int.Parse(x), x => '.');
        if (!string.IsNullOrEmpty(EndpointTags))
            EN.albums = EndpointTags.Split(',', StringSplitOptions.TrimEntries).ToDictionary(x => int.Parse(x), x => '.');
        DB.Endpoints.Add(EN.id, EN);
        DB.EndpointCache.Add(EN.GetPath(), EN.id);
        EndpointPath = "";
        EndpointAlbums = "";
        EndpointTags = "";
        DB.R.Db(Program.DatabaseName).Table("Endpoints").Insert(EN).RunNoReply(DB.Con);
    }
    public void DeleteEndpoint(int id)
    {
        if (!DB.Endpoints.TryGetValue(id, out Endpoint EN))
            return;
        DB.EndpointCache.Remove(EN.GetPath());
        DB.Endpoints.Remove(id);
        DB.R.Db(Program.DatabaseName).Table("Endpoints").Get(id).Delete().RunNoReply(DB.Con);
    }

    [CascadingParameter]
    private Session Session { get; set; }

    public void MigrateTags()
    {
        if (Session.State.User.GetId() != "190590364871032834")
        {
            ShowToast("You do not have access");
            return;
        }
        ShowToast("Running migration");
        foreach (GImage i in DB.Images.Values)
        {
            switch (i.album)
            {
                case 7:
                    {
                        try
                        {
                            i.tags.Add(10);
                        }
                        catch { }
                        i.Update();
                    }
                    break;
                case 1:
                    {
                        try
                        {
                            i.tags.Add(12);
                        }
                        catch { }
                        i.Update();
                    }
                    break;
                case 8:
                    {
                        try
                        {
                            i.tags.Add(9);
                        }
                        catch { }
                        try
                        {
                            i.tags.Add(1);
                        }
                        catch { }
                        i.Update();
                    }
                    break;
            }
        }
        ShowToast("Migrated tags data");
    }

    public void AddTag()
    {
        int id = DB.Tags.Values.OrderByDescending(x => x.id).First().id + 1;
        GTag newtag = new GTag()
            {
                id = id,
                name = NewTag
            };
        DB.Tags.Add(id, newtag);
        newtag.Add();
        ShowToast("Tag added", true);
    }

    void DeleteImage()
    {
        if (DB.Images.TryGetValue(Image, out GImage Img))
        {
            DB.Albums.TryGetValue(Img.album, out GAlbum album);
            if (Session.State.User.GetId() != "190590364871032834")
            {
                if (album == null)
                {
                    ShowToast("Image does not have an album");
                    return;
                }
                if (!(album.owner == Session.State.User.GetId() || album.access.ContainsKey(Session.State.User.GetId())))
                {
                    ShowToast("You do not have access to this image");
                    return;
                }
            }
            DB.R.Db(Program.DatabaseName).Table("Images").Get(Img.id).Delete().RunNoReply(DB.Con);

            if (File.Exists(Img.GetFile(imageType.Full)))
                File.Delete(Img.GetFile(imageType.Full));

            if (File.Exists(Img.GetFile(imageType.Medium)))
                File.Delete(Img.GetFile(imageType.Medium));

            if (DB.Images.Values.Where(x => x.file.hash == Img.file.hash).Any())
                DB.HashSet.Remove(Img.file.hash);

            DB.Images.Remove(Image);
            Image = "";
            ShowToast("Image deleted", true);
        }
    }

    void TestClick()
    {
        if (Session.State.User.GetId() != "190590364871032834")
        {
            ShowToast("You do not have access");
            return;
        }
        ShowToast("Thumbnails being regended");
        MagickReadSettings ReadSettings = new MagickReadSettings { ColorType = ColorType.Optimize, FrameCount = 1, FrameIndex = 0 };
        foreach (GImage i in DB.Images.Values)
        {
            if (File.Exists(i.GetFile(imageType.Medium)))
                continue;
            Console.WriteLine("REGEN: " + i.GetFile(imageType.Medium));
            using (FileStream fi = File.OpenRead(i.GetFile(imageType.Full)))
            {
                using (MagickImage image = new MagickImage(fi, ReadSettings))
                {
                    image.Resize(792, 594);
                    image.Write(i.GetFile(imageType.Medium), MagickFormat.WebP);
                    //image.Resize(320, 320);
                    //image.Write(i.GetFile(imageType.Thumbnail));
                }
            }
        }
        ShowToast("Thumbnails done!", true);
    }

    void CheckImages()
    {
        if (Session.State.User.GetId() != "190590364871032834")
        {
            ShowToast("You do not have access");
            return;
        }
        ShowToast("Checking images", true);
        foreach (GImage i in DB.Images.Values)
        {
            if (!File.Exists(i.GetFile(imageType.Full)))
            {
                ShowToast("Missing " + i.id, true);
            }
        }
        ShowToast("Checking done!", true);
    }

    public void ReloadAction(string type)
    {
        switch (type)
        {
            case "tags":
                DB.ReloadTags();
                break;
            case "albums":
                DB.ReloadAlbums();
                break;
            case "images":
                DB.ReloadImages();
                break;
            case "metadata":
                DB.ReloadMetaData();
                break;
            case "users":
                DB.ReloadUsers();
                break;
            case "api":
                DB.ReloadAPIKeys();
                break;
            case "waifu":
                DB.ReloadWaifuLewds();
                break;
            case "endpoint":
                DB.ReloadEndpoints();
                break;
        }
        ShowToast("Reloaded " + type);
    }

    public void ShowToast(string desc, bool force = false)
    {
        //Toaster.Add(desc, MatToastType.Success, "", "", config =>
        //{
        //    config.RequireInteraction = force;
        //    config.ShowCloseButton = force;
        //    config.ShowProgressBar = true;
        //    config.MaximumOpacity = Convert.ToInt32(100);

        //    config.ShowTransitionDuration = Convert.ToInt32(500);
        //    config.VisibleStateDuration = Convert.ToInt32(8000);
        //    config.HideTransitionDuration = Convert.ToInt32(500);
        //});
    }

}
