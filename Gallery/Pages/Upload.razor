@page "/upload"
@attribute [Authorize(Roles = "owner")]
@using System.IO;
@using Blazor.FileReader
@using ImageMagick
@inject IFileReaderService fileReaderService
@using MatBlazor
@using Gallery.Data
@using Gallery.Database
@inject AuthenticationStateProvider Authentication

<style>
    .@dropTargetClass {
        display:block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
    }
    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }
</style>

<div class="@DropClass"
     @ref=dropTargetElement
     @ondrop=OnDrop
     @ondragenter=OnDragEnter
     @ondragleave=OnDragLeave>
    Drop Files here.
</div>
<br />
<MatTable Items="@FileList" class="mat-elevation-z5">
    <MatTableHeader>
        <th>Name</th>
        <th>Type</th>
        <th>Size</th>
        <th>Upload</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.Name</td>
        <td>@context.Type</td>
        <td>@context.Size</td>
        @if (context.Status == GFileInfo.FileStatus.Error)
        {
            <td>ERROR</td>
        }
        else if (context.Status == GFileInfo.FileStatus.Ok)
        {
            <td>OK</td>
        }
        else if (context.Status == GFileInfo.FileStatus.Dupe)
        {
            <td>Dupe</td>
        }
        else
        {
            <td>---</td>
        }
    </MatTableRow>
</MatTable>
<br />
<button @onclick="ReadFile" disabled="@uploadDisabled" class="btn btn-primary">Upload images</button>


@code {
        ElementReference dropTargetElement;
        IFileReaderRef dropReference;

        const string dropTargetDragClass = "droptarget-drag";
        const string dropTargetClass = "droptarget";

    private List<string> _dropClasses = new List<string>() { dropTargetClass };

    string DropClass => string.Join(" ", _dropClasses);

    public bool uploadDisabled = false;


    List<GFileInfo> FileList { get; } = new List<GFileInfo>();

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            dropReference = fileReaderService.CreateReference(dropTargetElement);
            await dropReference.RegisterDropEventsAsync();
        }
    }

    public async Task OnAdditiveChange(ChangeEventArgs e)
    {
        await dropReference.UnregisterDropEventsAsync();
        await dropReference.RegisterDropEventsAsync(true);
    }

    public void OnDragEnter(EventArgs e)
    {
        _dropClasses.Add(dropTargetDragClass);
    }

    public void OnDragLeave(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnDrop(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshFileList();
    }

    private async Task RefreshFileList()
    {
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            this.FileList.Add(new GFileInfo(fileInfo));
        }
        this.StateHasChanged();
    }

    public async Task ReadFile()
    {
        uploadDisabled = true;
        FileList.Clear();
        var Auth = await Authentication.GetAuthenticationStateAsync();
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = new GFileInfo(await file.ReadFileInfoAsync());

            try
            {
                if (fileInfo.Size < 1)
                {
                    fileInfo.Status = GFileInfo.FileStatus.Error;
                }
                else
                {
                    MemoryStream Stream = await file.CreateMemoryStreamAsync();
                    string Hash = Program.getMd5Hash(Stream.ToArray());
                    GImage Found = DB.Images.Values.FirstOrDefault(x => x.hash == Hash) ?? null;
                    if (Found != null)
                    {
                        fileInfo.Status = GFileInfo.FileStatus.Dupe;
                    }
                    else
                    {
                        string Name = "." + fileInfo.Name.Split('.').Last();
                        string ID = Program.Gen.CreateId().ToString();
                        MagickFormat Format = MagickFormat.Jpg;
                        switch (Name)
                        {
                            case ".png":
                                Format = MagickFormat.Png;
                                break;
                            case ".gif":
                                Format = MagickFormat.Gif;
                                break;
                        }

                        if (Format == MagickFormat.Gif)
                        {
                            using (FileStream files = new FileStream("C:/Global/Website/Gallery/img/" + ID + Name, FileMode.Create, FileAccess.Write))
                            {
                                Stream.WriteTo(files);
                            }
                            Name = ".png";
                        }
                        int height = 0;
                        int width = 0;
                        using (MagickImage image = new MagickImage(Stream, new MagickReadSettings { ColorType = ColorType.Optimize, Format = Format, FrameIndex = 0, FrameCount = 1 }))
                        {
                            image.Strip();
                            height = image.Height;
                            width = image.Width;
                            if (Format != MagickFormat.Gif)
                                image.Write("C:/Global/Website/Gallery/img/" + ID + Name);
                            image.Resize(792, 594);
                            image.Write("C:/Global/Website/Gallery/med/" + ID + Name);
                            image.Thumbnail(200, 200);
                            image.Write("C:/Global/Website/Gallery/thm/" + ID + Name);
                        }
                        fileInfo.Status = GFileInfo.FileStatus.Ok;
                        GImage img = new GImage
                        {
                            id = ID,
                            name = fileInfo.Name,
                            author = Auth.User.GetId(),
                            date = DateTime.UtcNow,
                            filesize = fileInfo.Size,
                            hash = Hash,
                            height = 0,
                            width = 0,
                            albums = new List<int>
                        {
                            1
                        }
                        };
                        DB.Images.Add(ID, img);
                    }
                }
                FileList.Add(fileInfo);
            }
            catch (Exception ex)
            {
                fileInfo.Status = GFileInfo.FileStatus.Error;
                FileList.Add(fileInfo);
            }

        }
        await dropReference.ClearValue();
        uploadDisabled = false;
        this.StateHasChanged();
    }

}
