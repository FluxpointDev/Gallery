@page "/album/{albumid}"
@using Gallery.Data
@using Gallery.Database
@using BlazorContextMenu
@using MatBlazor
@inject AuthenticationStateProvider Authentication
@inject IJSRuntime JSRuntime
@inject IModalService Modal

@if (albumid == "0")
{
    <h1>Loading</h1>
}
else if (GetAlbum == null)
{
    <h1>Unknown gallery</h1>
}
else if (Private)
{
    <h3>You do not have permission to access this gallery</h3>
}
else if (GetAlbum.isNsfw && !Session.Nsfw)
{
    <RadzenImage class="nsfw-blur" Path="https://img.fluxpoint.dev/14980024427872256.png"></RadzenImage>
    <div class="nsfw-warning">
        <h3>NSFW warning</h3>
        <p>This content is for adults only (18+) please confirm your age</p>
        <center>
            <a href="/"><MatButton Class="btn-exit" Unelevated="true">I am under 18 years old</MatButton></a> <MatButton Class="btn-adult" OnClick="@ToggleNsfw" Unelevated="true">I am an adult</MatButton>
        </center>
    </div>
}
else
{
    @if (Images == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (GetAlbum.isNsfw)
        {
            <h1 id="title">@GetAlbum.name (Nsfw)</h1>
        }
        else
        {
            <h1 id="title">@GetAlbum.name</h1>
        }

        if (Images.Count() == 0)
        {
            <p>This album has no images :(</p>
        }
        else
        {
            <iframe id="dliframe" style="display:none"></iframe>
            <RadzenDataList @ref="ImageGrid" EmptyText="This album has no images :(" WrapItems="true" @bind-PageNumbersCount="@CurrentPage" @bind-PageSize="@PageSize" LoadData="@LoadData" AllowPaging="true" Data="@Selected" TItem="GImage">
                <Template Context="order">
                    <RadzenCard Id="@("card-" + order.id)" Style="width:320px; height:320px;">
                        <a Id="@("link-" + order.id)" href="@("/album/" + albumid)" @onclick="@(() => ShowImage(order.id))">
                            <ContextMenuTrigger MenuId="dynamicmenu" Data="order">
                                <img id="@("img-" + order.id)" class="album-image" src="@order.GetImage(imageType.Thumbnail)" />
                            </ContextMenuTrigger>
                        </a>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
            <AlbumPaginator CurrentPage="CurrentPage" MaxPageCount="MaxPageCount" PageCountChanged="@((num) => OnPageCountChanged(num))"></AlbumPaginator>
            <ContextMenu Animation="BlazorContextMenu.Animation.Zoom" CssClass="context-menu" Id="dynamicmenu" Context="order">
                <a href="@((order.Data as GImage).GetImage(imageType.Full))" target="_blank"><Item><span class="oi oi-image" /> View Image</Item></a>
                <a @onclick="@(() => DownloadImage((order.Data as GImage).GetImage(imageType.Download)))"><Item><span class="oi oi-link-intact" /> Copy Image URL</Item></a>
                <a @onclick="@((mouse) => SaveText((order.Data as GImage).GetImage(imageType.Full)))"><Item><span class="oi oi-data-transfer-download" /> Download Image</Item></a>
            </ContextMenu>
        }
    }
}

<style>
    .card {
        width: 320px;
        max-width: 320px;
        height: 320px;
        max-height: 320px;
    }

    .album-image {
        width: 320px;
        max-width: 320px;
        height: 320px;
        max-height: 320px;
    }

    .blazored-modal {
        padding: 0px !important;
        border-color: #0b2263;
    }

    .blazor-context-menu {
        border-radius: 5px;
        box-shadow: none;
        border: 1px solid #616161;
        background-color: #404448;
    }

    .ui-g > div {
        margin: 0.3rem !important;
    }

    .ui-g {
        margin-left: 20px;
    }

    .card {
        border: none !important;
        padding: 0px !important;
    }

    /* Dark theme context menu */
    .blazor-context-menu {
        color: #5ca6f8 !important;
        z-index: 10;
    }

    .blazor-context-menu__item--default .oi {
        color: rgb(200,47,238);
        padding-right: 5px;
    }

    .blazor-context-menu__item--default {
        text-decoration: none !important;
    }

        .blazor-context-menu__item--default:hover {
            color: white;
        }

    .blazor-context-menu a {
        color: #5ca6f8 !important;
    }

    /* Dark theme paginator controls */
    .ui-paginator {
        border: none;
        background-color: #383232 !important;
        margin-top: 5px;
        margin-bottom: 15px;
    }

    .ui-paginator-page.ui-state-active {
        color: rgb(5,65,194);
    }

    .ui-paginator-page:hover {
        color: black;
    }

    .ui-paginator-bottom {
    display: none;
}

    /* Nsfw warning */
    .nsfw-warning {
    position: fixed;
    top: 20%;
    left: 30%;
    width: 50%;
    height: 50%;
    z-index: 1;
    padding: 10px;
    background: rgb(1,1, 1, 0.6)
}
.nsfw-warning h3 {
    padding-bottom: 20px;
}
.btn-adult {
    margin-top: 10px;
    opacity: 0.4;
  background-color: rgba(128,128,128) !important;
}

.btn-exit {
    margin-top: 10px;
    background-color: rgb(215,52,52) !important;
}
.nsfw-blur img {
    width: 100%;
    height: 100%;
}
</style>

@code {
    [Parameter]
    public string albumid { get; set; } = "0";

    [CascadingParameter]
    private Session Session { get; set; }

    RadzenDataList<GImage> ImageGrid;

    public int PageSize = 12;
    public int CurrentPage = 0;
    public int MaxPageCount = 1;
    public int ItemCount = 0;

    public GAlbum GetAlbum = null;
    public bool Private = false;
    public IEnumerable<GImage> Images = null;
    public IEnumerable<GImage> Selected = null;

    public void OnPageCountChanged(int value)
    {
        ScrollToTop();
        CurrentPage = value;
        ImageGrid.GoToPage(value);

    }

    public void ToggleNsfw()
    {
        Session.Nsfw = true;
    }

    void ShowImage(string imageid)
    {
        var parameters = new ModalParameters();
        parameters.Add("ImageId", imageid);

        Modal.Show<ImagePopup>("View Image", parameters, new ModalOptions
        {
            HideHeader = true
        });

    }

    protected override async Task OnParametersSetAsync()
    {
        Private = false;
        if (CurrentPage != 0)
        {
            CurrentPage = 0;
            MaxPageCount = 1;
            ImageGrid.GoToPage(0);
        }
        if (!int.TryParse(albumid, out int number))
        {
            albumid = "-1";
            return;
        }
        if (DB.Albums.TryGetValue(number, out GAlbum GAlbum))
        {
            if (!GAlbum.isPublic)
            {
                var Auth = await Authentication.GetAuthenticationStateAsync();
                if (Auth.User.Identity.IsAuthenticated)
                {
                    if (Auth.User.IsInRole("owner"))
                    {
                        GetAlbum = GAlbum;
                        await Task.Run(() =>
                        {
                            Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);
                            MaxPageCount = (Images.Count() - 1) / PageSize + 1;
                        });
                    }
                    else
                    {
                        Private = true;
                        GetAlbum = new GAlbum { id = 0, name = "RESTRICTED" };
                    }
                }
                else
                {
                    Private = true;
                    GetAlbum = new GAlbum { id = 0, name = "RESTRICTED" };
                }
            }
            else
            {
                GetAlbum = GAlbum;
                await Task.Run(() =>
                {
                    Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);
                    MaxPageCount = (Images.Count() - 1) / PageSize + 1;
                });
            }
        }
        else
        {
            albumid = "-1";
        }
    }

    private async void LoadData(Radzen.LoadDataArgs args)
    {
        Selected = await Task.FromResult(Images.Skip(args.Skip.Value).Take(args.Top.Value));
    }

    public void ScrollToTop()
    {
        JSRuntime.InvokeAsync<string>("scrollToTop", 60);
    }

    public async Task SaveText(string text)
    {
        try
        {
            await JSRuntime.InvokeAsync<object>("writeToClipboardOnPermission", text);
        }
        catch (Exception ex)
        {

        }
    }

    public async Task DownloadImage(string url)
    {
        await JSRuntime.InvokeAsync<object>("downloadURI", url);
    }
}