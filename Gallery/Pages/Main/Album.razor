@page "/album/{albumid}"
@using Gallery.Data
@using Gallery.Database
@using BlazorContextMenu
@using MatBlazor
@using System.IO
@using MudBlazor
@inject AuthenticationStateProvider Authentication
@inject IJSRuntime JSRuntime
@inject IBlazorContextMenuService ContextService
@inject IDialogService DialogService

@if (albumid == "0")
{
    <h1>Loading</h1>
}
else if (GetAlbum == null)
{
    <h1>Unknown gallery</h1>
}
else if (Private)
{
    <h3>You do not have permission to access this gallery</h3>
}
else if (GetAlbum.isNsfw && !Session.Nsfw)
{
    <RadzenImage class="nsfw-blur" Path="https://img.fluxpoint.dev/14980024427872256.png"></RadzenImage>
    <div class="nsfw-warning">
        <h3>NSFW warning</h3>
        <p>This content is for adults only (18+) please confirm your age</p>
        <center>
            <a href="/"><MatButton Class="btn-exit" Unelevated="true">I am under 18 years old</MatButton></a> <MatButton Class="btn-adult" OnClick="@ToggleNsfw" Unelevated="true">I am an adult</MatButton>
        </center>
    </div>
}
else if (APIOnly)
{
    <h3>This album is limited to the API only.</h3>
}
else
{
    @if (Images == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (GetAlbum.isNsfw)
        {
            <h1 id="title">@GetAlbum.name (Nsfw)</h1>
        }
        else
        {
            <h1 id="title">@GetAlbum.name</h1>
        }
        @if (SubAlbums != null)
        {
            <div class="ggrid">
                @foreach (GAlbum a in SubAlbums)
                {
                    <a href="@("/album/" + a.id.ToString())">
                        <div class="galbum">
                            <div class="galbum-inner" style="background-image: url('@a.GetThumbnailImage()'), linear-gradient(rgba(0,0,0,0.5),rgba(0,0,0,0.3));">
                                <div class="gablum-header">
                                    @if (a.isNsfw)
                                    {
                                        <span class="iconify" data-icon="mdi:folder-heart" style="color: #c07ec8;"></span>
                                        <h3 class="gablum-title">@a.name <p class="galbum-badge galbum-badge-nsfw">Nsfw</p>   </h3>

                                    }
                                    else if (!a.isPublic)
                                    {
                                        <span class="iconify" data-icon="mdi:folder-star" style="color: #fab13e;"></span>
                                        <h3 class="gablum-title">@a.name <p class="galbum-badge galbum-badge-private">Private</p></h3>

                                    }
                                    else
                                    {
                                        <span class="iconify" data-icon="mdi:folder" style="color: #7489d8;"></span>
                                        <h3 class="gablum-title">@a.name</h3>
                                    }
                                </div>
                            </div>
                        </div>
                    </a>
                }
            </div>

        }
        if (Images.Count() == 0)
        {
            <p>This album has no images :(</p>
        }
        else
        {
            <MudOverlay Class="album-popup-image" @bind-Visible="ToggleOverlay" LockScroll="true" AutoClose="true">
                    <img src="@SelectedImage" style="max-height: 90%; max-width: 90%;" />
                </MudOverlay>
            <iframe id="dliframe" style="display:none"></iframe>
            <div class="ggrid">
                
                <RadzenDataList @ref="ImageGrid" EmptyText="This album has no images :(" WrapItems="true" @bind-PageNumbersCount="@CurrentPage" @bind-PageSize="@PageSize" LoadData="@LoadData" AllowPaging="true" Data="@Selected" TItem="GImage">
                    <Template Context="order">

                        <a Id="@("link-" + order.id)" href="@("/album/" + albumid)" @onclick="@(() => ShowImage(order.id))">

                            <ContextMenuTrigger MenuId="image-menu" Data="order">
                                <div Id="@("card-" + order.id)" class="gimage">
                                    <img id="@("img-" + order.id)" src="@order.GetImage(imageType.Thumbnail)" onerror="this.onerror=null;this.src='https://cdn.discordapp.com/attachments/275062423159963648/976286472900579378/no-image-min.png';" />
                                </div>
                            </ContextMenuTrigger>
                        </a>
                    </Template>
                </RadzenDataList>
            </div>
            <AlbumPaginator CurrentPage="CurrentPage" MaxPageCount="MaxPageCount" PageCountChanged="@((num) => OnPageCountChanged(num))"></AlbumPaginator>
            <ContextMenu Animation="BlazorContextMenu.Animation.Slide" AutoHide="true" CssClass="context-menu" Id="image-menu" Context="order">
                <Item><span class="iconify" data-icon="mdi:arrow-expand" style="color: #CFCECE;"></span> @((order.Data as GImage).file.width)x@((order.Data as GImage).file.height)  </Item>
                <a href="@((order.Data as GImage).GetImage(imageType.Full))" target="_blank" @onclick="@(() => ContextService.HideMenu("image-menu"))"><Item><span class="iconify" data-icon="mdi:image" style="color: #7cc8cd;"></span> View Image</Item></a>
                <Item OnClick="@(() => SaveText((order.Data as GImage).GetImage(imageType.Full)))"><span class="iconify" data-icon="mdi:link-variant" style="color: #F8DF61;"></span> Copy Image URL</Item>
                <Item OnClick="@(() => DownloadImage((order.Data as GImage).GetImage(imageType.Download)))"><span class="iconify" data-icon="mdi:download" style="color: #3fb363;"></span> Download Image</Item>
                @if (Session.State.User.Identity.IsAuthenticated && Session.State.User.GetId() == "190590364871032834")
                {
                    <Seperator />
                    <Item>
                        <span class="iconify" data-icon="mdi:arrow-right-thick" style="color: #f48225;"></span> Move Image
                        <SubMenu>
                            @foreach (var a in DB.Albums.Values.OrderBy(x => x.name))
                            {
                                if (a.subAlbum != 0)
                                    continue;
                                if (a.isSubAlbum)
                                {
                                    <Item>
                                        <span class="iconify" data-icon="mdi:arrow-right-thick" style="color: #f48225;"></span> @a.name
                                        <SubMenu>
                                            @foreach (var s in DB.Albums.Values.Where(x => x.subAlbum == a.id).OrderBy(x => x.name))
                                            {
                                                <Item OnClick="@(() => MoveImage((order.Data as GImage), s))">@s.GetComboxName()</Item>
                                            }
                                        </SubMenu>
                                    </Item>
                                }
                                else
                                {
                                    <Item OnClick="@(() => MoveImage((order.Data as GImage), a))">@a.GetComboxName()</Item>
                                }

                            }
                        </SubMenu>
                    </Item>
                    <Item>
                        <span class="iconify" data-icon="mdi:arrow-right-thick" style="color: #d0bb41;"></span> Options
                        <SubMenu>
                            <Item OnClick="@(() => SetAlbumCover((order.Data as GImage)))"><span class="iconify" data-icon="mdi:delete" style="color: #f43f43;"></span> Set Album Cover</Item>
                        </SubMenu>
                    </Item>
                }
                @if (GetAlbum.HasDeleteAccess(Session))
                {
                    <Item OnClick="@(() => DeleteImage((order.Data as GImage)))"><span class="iconify" data-icon="mdi:delete" style="color: #f43f43;"></span> Delete Image</Item>
                }
            </ContextMenu>
        }
    }
}

<style>

    .blazor-context-menu {
        border-radius: 5px;
        box-shadow: none;
        border: 1px solid #616161;
        background-color: #404448;
        -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;
    }

    .blazor-context-submenu {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;
    box-shadow: none;
border: 1px solid #616161;
}

    /* Dark theme context menu */
    .blazor-context-menu {
        color: #5ca6f8 !important;
        z-index: 10;
    }

    .blazor-context-menu__item--default .oi {
        color: rgb(200,47,238);
        padding-right: 5px;
    }

    .blazor-context-menu__item--default {
        text-decoration: none !important;
    }

        .blazor-context-menu__item--default:hover {
            color: white;
        }

    .blazor-context-menu a {
        color: #5ca6f8 !important;
    }

    /* Dark theme paginator controls */
    .rz-g {
        max-width: 1080px;
        max-height: 740px;
        margin-left: 20px;
    }

    .rz-paginator-page {
        border: none !important;
        background-color: #45474d !important;
        color: white !important;
    }

    .rz-state-active {
        padding-left: 8px !important;
        padding-right: 8px !important;
        color: #8ca1ef !important;
    }

    .rz-paginator {
        border: none;
        background-color: #383232 !important;
        position: sticky !important;
        bottom: 0 !important;
    }

    .rz-paginator-prev, .rz-paginator-first {
        background-color: #479cc8 !important;
        color: white;
    }

    /* Nsfw warning */
    .nsfw-warning {
        position: fixed;
        top: 20%;
        left: 30%;
        width: 50%;
        height: 50%;
        z-index: 1;
        padding: 10px;
        background: rgb(1,1, 1, 0.6)
    }

        .nsfw-warning h3 {
            padding-bottom: 20px;
        }

    .btn-adult {
        margin-top: 10px;
        opacity: 0.4;
        background-color: rgba(128,128,128) !important;
    }

    .btn-exit {
        margin-top: 10px;
        background-color: rgb(215,52,52) !important;
    }

    .nsfw-blur img {
        width: 100%;
        height: 100%;
    }

    a > div {
        width: 240px;
        height: 240px;
        display: inline-block;
        vertical-align: top;
        border-radius: 4px;
        margin: 4px;
        padding: 2px;
    }

    .rz-paginator {
        margin-left: 30px;
        margin-right: 80px;
    }


    .album-popup-image {
    background-color: rgba(0,0,0,0.4);
}
.album-popup-image img {
    position: fixed;
    bottom: 0;
    left: 0;
  margin: auto;
    right: 0;
    top: 0;
}
</style>



@code {
    [Parameter]
    public string albumid { get; set; } = "0";

    [CascadingParameter]
    private Session Session { get; set; }

    public ContextMenu ContextMenu { get; set; }

    RadzenDataList<GImage> ImageGrid;

    public string SelectedImage;
    public bool ToggleOverlay = false;

    public int PageSize = 12;
    public int CurrentPage = 0;
    public int MaxPageCount = 1;
    public int ItemCount = 0;

    public GAlbum GetAlbum = null;
    public bool Private = false;
    public bool APIOnly = false;
    public IEnumerable<GImage> Images = null;
    public IEnumerable<GImage> Selected = null;

    public void OnPageCountChanged(int value)
    {
        ScrollToTop();
        CurrentPage = value;
        ImageGrid.GoToPage(value);
    }

    public async Task MoveImage(GImage img, GAlbum album)
    {
        ContextService.HideMenu("image-menu");
        if (GetAlbum.isNsfw && !album.isNsfw)
        {
            var Result = await DialogService.ShowMessageBox("Move Image?", "You are moving an nsfw image into a sfw album, do you want to continue", "Yes", "", "No");
            if (Result.HasValue && Result.Value)
            {
                img.album = album.id;
                img.Update();
            }
            return;
        }

        img.album = album.id;
        img.Update();
    }

    public void ToggleNsfw()
    {
        Session.Nsfw = true;
    }

    public void SetAlbumCover(GImage img)
    {
        ContextService.HideMenu("image-menu");
        DB.Albums[img.album].thumbnailImage = img.id;
        DB.Albums[img.album].Update();
    }

    void ShowImage(string imageid)
    {
        ContextService.HideMenu("image-menu");
        if (Database.DB.Images.TryGetValue(imageid, out GImage GetImage))
        {
            SelectedImage = GetImage.GetImage(imageType.Full);
            ToggleOverlay = true;
        }
    }

    List<GAlbum> SubAlbums = null;
    public bool FirstLoad = true;
    protected override async Task OnParametersSetAsync()
    {
        if (FirstLoad)
            JSRuntime.InvokeVoidAsync("KeyListen");
        FirstLoad = false;
        Images = null;
        SubAlbums = null;
        Private = false;
        APIOnly = false;
        if (CurrentPage != 0)
        {
            CurrentPage = 0;
            MaxPageCount = 1;
            ImageGrid.GoToPage(0);
        }
        if (!int.TryParse(albumid, out int number))
        {
            albumid = "-1";
            return;
        }
        if (DB.Albums.TryGetValue(number, out GAlbum GAlbum))
        {
            if (GAlbum.isSubAlbum)
            {
                SubAlbums = DB.Albums.Values.Where(x => x.subAlbum == GAlbum.id && x.HasAccess(Session)).OrderBy(x => x.name).ToList();
            }
            if (!GAlbum.isPublic)
            {
                bool Access = GAlbum.HasAccess(Session);
                if (Access)
                {
                    GetAlbum = GAlbum;
                    await Task.Run(() =>
                    {
                        Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);
                        MaxPageCount = (Images.Count() - 1) / PageSize + 1;
                    });
                }
                else
                {
                    Private = true;
                    GetAlbum = new GAlbum { id = 0, name = "RESTRICTED" };
                    Images = new List<GImage>();
                }
            }
            else
            {

                if (GAlbum.isAPIOnly && !(Session.State.User.Identity.IsAuthenticated && Session.State.User.IsInRole("owner")))
                {
                    GetAlbum = new GAlbum { id = 0, name = "API Only" };
                    APIOnly = GetAlbum.isAPIOnly;
                    Images = new List<GImage>();
                }
                else
                {
                    GetAlbum = GAlbum;
                    await Task.Run(() =>
                    {
                        Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);
                        MaxPageCount = (Images.Count() - 1) / PageSize + 1;
                    });
                }
            }
        }
        else
        {
            albumid = "-1";
        }
    }

    private async void LoadData(Radzen.LoadDataArgs args)
    {
        Selected = await Task.FromResult(Images.Skip(args.Skip.Value).Take(args.Top.Value));
    }

    public void ScrollToTop()
    {
        JSRuntime.InvokeAsync<string>("scrollToTop", 60);
    }

    public async Task SaveText(string text)
    {
        ContextService.HideMenu("image-menu");
        try
        {
            await JSRuntime.InvokeAsync<object>("writeToClipboardOnPermission", text);
        }
        catch { }

    }

    public async Task DownloadImage(string url)
    {
        ContextService.HideMenu("image-menu");
        await JSRuntime.InvokeAsync<object>("downloadURI", url);
    }

    public async Task DeleteImage(GImage img)
    {
        ContextService.HideMenu("image-menu");
        if (!DB.Albums[img.album].HasDeleteAccess(Session))
            return;

        var Result = await DialogService.ShowMessageBox("Delete Image?", "You are about to permanently delete this image!", "Yes", "", "No");
        if (Result.HasValue && Result.Value)
        {
            DB.R.Db(Program.DatabaseName).Table("Images").Get(img.id).Delete().RunNoReply(DB.Con);

            if (File.Exists(img.GetFile(imageType.Full)))
                File.Delete(img.GetFile(imageType.Full));

            if (File.Exists(img.GetFile(imageType.Medium)))
                File.Delete(img.GetFile(imageType.Medium));

            if (DB.Images.Values.Where(x => x.file.hash == img.file.hash).Any())
                DB.HashSet.Remove(img.file.hash);

            DB.Images.Remove(img.id);
        }
    }
}