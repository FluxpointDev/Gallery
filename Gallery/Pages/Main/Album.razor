@page "/album/{albumid}"
@using Gallery.Data
@using Gallery.Database
@using BlazorContextMenu
@inject AuthenticationStateProvider Authentication
@inject IJSRuntime JSRuntime
@inject IModalService Modal

@if (albumid == "0")
{
    <h1>Loading</h1>
}
else if (GetAlbum == null)
{
    <h1>Unknown gallery</h1>
}
else if (Private)
{
    <h3>You do not have permission to access this gallery</h3>
}
else
{
    @if (Images == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (GetAlbum.isNsfw)
        {
            <h1>@GetAlbum.name (Nsfw)</h1>
        }
        else
        {
            <h1>@GetAlbum.name</h1>
        }

        if (Images.Count() == 0)
        {
            <p>This album has no images :(</p>
        }
        else
        {
            <iframe id="dliframe" style="display:none"></iframe>
            <RadzenDataList EmptyText="This album has no images :(" WrapItems="true" PageSize="12" AllowPaging="true" Data="@Images" TItem="GImage">
                <Template Context="order">
                    <RadzenCard Id="@("card-" + order.id)" Style="width:320px; height:320px;">

                        <a Id="@("link-" + order.id)" href="@("/album/" + albumid)" @onclick="@(() => ShowImage(order.id))">
                            <ContextMenuTrigger Id="@("trigger-" + order.id)" MenuId="@("menu-" + order.id)">
                                <img id="@("img-" + order.id)" class="album-image" src="@order.GetImage(imageType.Thumbnail)" />
                            </ContextMenuTrigger>
                        </a>
                        <ContextMenu Id="@("menu-" + order.id)">
                            <h1>Test</h1>
                            <a id="image-view" href="@order.GetImage(imageType.Full)" target="_blank"><Item>View Image</Item></a>
                            <a id="image-download" @onclick="@(() => DownloadImage(order.GetImage(imageType.Download)))"><Item>Download Image</Item></a>
                            <a id="image-path" @onclick="@((mouse) => SaveText(order.GetImage(imageType.Full)))"><Item>Copy Image Location</Item></a>
                        </ContextMenu>
                    </RadzenCard>
                </Template>
            </RadzenDataList>
        }
    }
}

<style>
    .card {
        width: 320px;
        max-width: 320px;
        height: 320px;
        max-height: 320px;
    }

    .album-image {
        width: 320px;
        max-width: 320px;
        height: 320px;
        max-height: 320px;
    }

    .blazored-modal {
        padding: 0px !important;
        border-color: #0b2263;
    }

    .blazor-context-menu {
        border-radius: 5px;
        box-shadow: none;
        border: 1px solid #616161;
        background-color: #404448;
    }

    .ui-g > div {
        margin: 0.3rem !important;
    }

    .ui-g {
        margin-left: 20px;
    }

    .card {
        border: none !important;
        padding: 0px !important;
    }

    /* Dark theme context menu */
    .blazor-context-menu {
        color: #5ca6f8 !important;
        z-index: 10;
    }

        .blazor-context-menu li:hover {
            text-decoration: underline;
        }

        .blazor-context-menu a {
            text-decoration: none;
            color: #5ca6f8 !important;
        }

        /* Dark theme paginator controls */
        .ui-paginator {
    border: none;
    background-color: #383232 !important;
    margin-top: 5px;
      margin-bottom: 15px;
}
.ui-paginator-page.ui-state-active {
     color: rgb(5,65,194);
}
.ui-paginator-page:hover {
    color: black;
}
</style>

@code {
    [Parameter]
    public string albumid { get; set; } = "0";

    public GAlbum GetAlbum = null;
    public bool Private = false;
    public IEnumerable<GImage> Images = null;


    void ShowImage(string imageid)
    {
        var parameters = new ModalParameters();
        parameters.Add("ImageId", imageid);

        Modal.Show<ImagePopup>("View Image", parameters, new ModalOptions
        {
            HideHeader = true
        });

    }

void ClickRow()
{
Console.WriteLine("Toggle");
}


    protected override async Task OnParametersSetAsync()
    {
        if (!int.TryParse(albumid, out int number))
        {
            albumid = "-1";
            return;
        }
        if (DB.Albums.TryGetValue(number, out GAlbum GAlbum))
        {
            Console.WriteLine("PARAM");
            if (!GAlbum.isPublic)
            {
                var Auth = await Authentication.GetAuthenticationStateAsync();
                if (Auth.User.Identity.IsAuthenticated)
                {
                    if (Auth.User.IsInRole("owner"))
                    {
                        GetAlbum = GAlbum;
                        await Task.Run(() =>
                        {
                            Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);

                        });
                    }
                    else
                    {
                        Private = true;
                        GetAlbum = new GAlbum { id = 0, name = "RESTRICTED" };
                    }
                }
                else
                {
                    Private = true;
                    GetAlbum = new GAlbum { id = 0, name = "RESTRICTED" };
                }
            }
            else
            {
                GetAlbum = GAlbum;
                await Task.Run(() =>
                {
                    Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);

                });
            }
        }
        else
        {
            albumid = "-1";
        }
    }

    public async Task SaveText(string text)
    {
        try
        {
            await JSRuntime.InvokeAsync<object>("writeToClipboardOnPermission", text);
        }
        catch (Exception ex)
        {

        }
    }

    public async Task DownloadImage(string url)
    {
        await JSRuntime.InvokeAsync<object>("downloadURI", url);
    }
}