@page "/album/{albumid}"
@using Gallery.Data
@using Gallery.Database
@inject AuthenticationStateProvider Authentication

@if (albumid == "0")
{
    <h1>Loading</h1>
}
else if (GetAlbum == null)
{
    <h1>Unknown gallery</h1>
}
else if (Private)
{
    <h3>You do not have permission to access this gallery</h3>
}
else
{
    @if (Images == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h1>@GetAlbum.name</h1>
        if (Images.Count() == 0)
        {
            <p>This album has no images :(</p>
        }
        <RadzenDataList WrapItems="true" PageSize="12" AllowPaging="true" Data="@Images" TItem="GImage">
            <Template Context="order">
                <RadzenCard Style="width:320px; height:320px;">
                    <img src="@order.GetImage(imageType.Thumbnail)" />
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
}

<style>
    .card {
        width: 320px;
        max-width: 320px;
        height: 320px;
        max-height: 320px;
    }

    img {
        width: 320px;
        max-width: 320px;
        height: 320px;
        max-height: 320px;
    }

    .ui-g > div {
        margin: 0.3rem !important;
    }

    .ui-g {
        margin-left: 20px;
    }

    .card {
        border: none !important;
        padding: 0px !important;
    }
</style>

@code {
    [Parameter]
    public string albumid { get; set; } = "0";

    public GAlbum GetAlbum = null;
    public bool Private = false;
    public IEnumerable<GImage> Images = null;

    protected override async Task OnParametersSetAsync()
    {
        if (!int.TryParse(albumid, out int number))
        {
            albumid = "-1";
            return;
        }
        if (DB.Albums.TryGetValue(number, out GAlbum GAlbum))
        {
            if (!GAlbum.isPublic)
            {
                var Auth = await Authentication.GetAuthenticationStateAsync();
                if (Auth.User.Identity.IsAuthenticated)
                {
                    if (Auth.User.IsInRole("owner"))
                    {
                        GetAlbum = GAlbum;
                        await Task.Run(() =>
                {
                    Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);
                });
                    }
                    else
                    {
                        Private = true;
                    GetAlbum = new GAlbum { id = 0, name = "RESTRICTED" };
                    }
                }
                else
                {
                    Private = true;
                    GetAlbum = new GAlbum { id = 0, name = "RESTRICTED" };
                }
            }
            else
            {
                GetAlbum = GAlbum;
                await Task.Run(() =>
                {
                    Images = DB.Images.Values.Where(x => x.album == GetAlbum.id & !x.options.isDeleted & !x.options.isHidden);
                });
            }
        }
        else
        {
            albumid = "-1";
        }
    }
}